#!/bin/bash

# process-ocr is a filter for adding XML markup to a text rendering of
# a scanned bookpage. Usage: process-ocr [-h] [files(s)] > filename

PROGRAM=`basename "$0"`                 # Program name
VERSION='1.0'				# Version name

usage () {
  echo >&2 "$PROGRAM - add XML tags to scanned book page, v$VERSION
  usage: $PROGRAM [-h] [file(s) ...]"
  exit 1
}

while getopts :hv opt
do
  case "$opt" in
    # Your flags here
    h)      usage;;
    v)      echo "$PROGRAM - add XML tags to scanned book page, v$VERSION" >&2
      exit 1;;
    '?')    echo "$0: invalid option -$OPTARG" >&2
      echo "usage: $0 [-hv] [file(s) ...]" >&2
      exit 1
      ;;
  esac
  shift
done

shift $((OPTIND - 1))                   			# Remove options, leave arguments

insert-page-breaks(){
sed \
  -e '1s/^\([0-9]\{1,3\}\).*$/<pb n="\1" facs="'$(basename "$@" _crop.txt)'"\/>/' \
  -e '1s/^[^0-9]*\([0-9]\{1,3\}\)$/<pb n="\1" facs="'$(basename "$@" _crop.txt)'"\/>/' \
  "$@"
}

add-paragraphs(){
sed '
/^$/!{
H
d
     }
     /^$/{
     x
     s/^\n/<p>/
     s/$/<\/p>/
     G
   }' "$@"
 }

 join-lines(){
 sed ':a
 /-$/{
 N
 s/-\n/<lb rend="-"\/>/
 ba
    }' "$@"
  }

  clean-up(){
  # 1. reduce newlines to one, 2. remove empty p elements, 3. remove p wrappers
  # around pb elements.
  sed \
    -e '/^$/{
  N
  /^\n$/d
}' \
  -e '/<p> <\/p>/d' \
  -e 's/<p>\(<pb n="[0-9]\{1,3\}" facs=".*"\/>\)<\/p>/\1/g' "$@"
#    -e 's/\([^\.!:]\)<\/p>$/\1/g' \ This became too greedy; needs
#    more refinement.
#    -e 's/\n<p>\([a-zæøå]\)/\1/g' "$@"
}

for f in "$@"
do
  insert-page-breaks "$f" | add-paragraphs | clean-up | join-lines
done
